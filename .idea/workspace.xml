<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="SELECTIVE" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="c7c7d2e7-40f8-4136-ad61-d6605d670397" name="Changes" comment="">
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/test/scala/QuestionFilterSpec.scala" beforeDir="false" afterPath="$PROJECT_DIR$/src/test/scala/QuestionFilterSpec.scala" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="ExternalProjectsData">
    <projectState path="$PROJECT_DIR$">
      <ProjectState />
    </projectState>
  </component>
  <component name="ExternalProjectsManager">
    <system id="SBT">
      <state>
        <projects_view>
          <tree_state>
            <expand>
              <path>
                <item name="" type="6a2764b6:ExternalProjectsStructure$RootNode" />
                <item name="GuesswhoGame" type="f1a62948:ProjectNode" />
              </path>
            </expand>
            <select />
          </tree_state>
        </projects_view>
      </state>
    </system>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_BRANCH_BY_REPOSITORY">
      <map>
        <entry key="$PROJECT_DIR$" value="MVP" />
      </map>
    </option>
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="GitHubPullRequestSearchHistory">{
  &quot;lastFilter&quot;: {
    &quot;state&quot;: &quot;OPEN&quot;,
    &quot;assignee&quot;: &quot;waris1hezb&quot;
  }
}</component>
  <component name="GithubPullRequestsUISettings">{
  &quot;selectedUrlAndAccountId&quot;: {
    &quot;url&quot;: &quot;git@github.com:waris1hezb/GuesswhoGame.git&quot;,
    &quot;accountId&quot;: &quot;8c746b9c-da70-4920-9f82-10442edfcdbc&quot;
  }
}</component>
  <component name="ProjectCodeStyleSettingsMigration">
    <option name="version" value="2" />
  </component>
  <component name="ProjectColorInfo">{
  &quot;customColor&quot;: &quot;&quot;,
  &quot;associatedIndex&quot;: 1
}</component>
  <component name="ProjectId" id="2tBT3lvMZwUDsNk3003DAA2wfV7" />
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent"><![CDATA[{
  "keyToString": {
    "Application.Main.executor": "Run",
    "RunOnceActivity.ShowReadmeOnStart": "true",
    "RunOnceActivity.git.unshallow": "true",
    "ScalaTest.QuestionFilterSpec.executor": "Run",
    "ScalaTest.QuestionFilterSpec.filterCharacters should return a Boolean and a list of characters wearing glasses when the characters wear glasses.executor": "Run",
    "ScalaTest.QuestionFilterSpec.filterCharacters should return a boolean and a list of characters wearing a hat when the characters wear a hat.executor": "Run",
    "ScalaTest.QuestionFilterSpec.filterCharacters should return a boolean and a list of characters wearing glasses when the characters wear glasses.executor": "Run",
    "ScalaTest.QuestionFilterSpec.filterCharacters should return a list of characters wearing glasses when the characters wear glasses.executor": "Run",
    "ScalaTest.QuestionFilterSpec.filterCharacters should return a list of characters wearing glasses when they wear glasses..executor": "Run",
    "ScalaTest.QuestionFilterSpec.filterCharacters should return a list of characters wearing glasses when they wear glasses.executor": "Run",
    "ScalaTest.QuestionFilterSpec.filterCharacters should return false and a list of all characters when anything is invalid.executor": "Run",
    "ScalaTest.QuestionFilterSpec.filterCharacters should return false and a list of characters wearing a hat when the characters wear a hat.executor": "Run",
    "ScalaTest.QuestionFilterSpec.filterCharacters should return false and a list of characters who are not blonde when the characters are not blonde.executor": "Run",
    "ScalaTest.QuestionFilterSpec.filterCharacters should return true and a list of characters wearing glasses when the characters wear glasses\nfilterCharacters should return false and a list of characters wearing a hat when the characters wear a hat\nfilterCharacters should return a boolean and a list of characters who are male when the characters are men\nfilterCharacters should return false and a list of characters who are male when the characters are male\nfilterCharacters should return false and a list of characters who are not blonde when the characters are not blonde\nfilterCharacters should return true and a list of characters who have black hair when the characters have black hair\nfilterCharacters should return false and a list of all characters when anything is invalid\nfilterCharacters should return false and a list of all characters when nothing is entered.executor": "Run",
    "ScalaTest.QuestionFilterSpec.filterCharacters should return true and a list of characters wearing glasses when the characters wear glasses.executor": "Run",
    "ScalaTest.QuestionFilterSpec.filterCharacters should return true and a list of characters who have black hair when the characters have black hair.executor": "Run",
    "git-widget-placeholder": "MVP",
    "kotlin-language-version-configured": "true",
    "last_opened_file_path": "/Users/waris.hezb/Documents/GuesswhoGame"
  }
}]]></component>
  <component name="RunManager" selected="ScalaTest.QuestionFilterSpec.filterCharacters should return true and a list of characters wearing glasses when the characters wear glasses&#10;filterCharacters should return false and a list of characters wearing a hat when the characters wear a hat&#10;filterCharacters should return true and a list of characters who are male when the characters are men&#10;filterCharacters should return false and a list of characters who are male when the characters are male&#10;filterCharacters should return false and a list of characters who are not blonde when the characters are not blonde&#10;filterCharacters should return true and a list of characters who have black hair when the characters have black hair&#10;filterCharacters should return false and a list of all characters when anything is invalid&#10;filterCharacters should return false and a list of all characters when nothing is entered">
    <configuration default="true" type="JetRunConfigurationType">
      <module name="guesswhogame_4782" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration default="true" type="KotlinStandaloneScriptRunConfigurationType">
      <module name="guesswhogame_4782" />
      <option name="filePath" />
      <method v="2" />
    </configuration>
    <configuration name="QuestionFilterSpec.filterCharacters should return false and a list of all characters when anything is invalid" type="ScalaTestRunConfiguration" factoryName="ScalaTest" temporary="true" nameIsGenerated="true" show_console_on_std_err="false" show_console_on_std_out="false">
      <module name="GuesswhoGame" />
      <option name="VMParameters" value="" />
      <option name="allowRunningInParallel" value="false" />
      <option name="alternativeJrePath" />
      <option name="alternativeJrePathEnabled" value="false" />
      <option name="classpathModifications">
        <list />
      </option>
      <option name="envFilePaths">
        <list />
      </option>
      <option name="envs">
        <map />
      </option>
      <option name="passParentEnvs" value="true" />
      <option name="programParameters" value="" />
      <option name="projectPathOnTarget" />
      <option name="selectedOptions">
        <list />
      </option>
      <option name="testKind" value="Test name" />
      <option name="workingDirectory" value="$PROJECT_DIR$" />
      <option name="testClassPath" value="QuestionFilterSpec" />
      <option name="testName" value="filterCharacters should return false and a list of all characters when anything is invalid" />
      <option name="workingDirectory" value="$PROJECT_DIR$" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="QuestionFilterSpec.filterCharacters should return false and a list of all characters when nothing is entered" type="ScalaTestRunConfiguration" factoryName="ScalaTest" temporary="true" nameIsGenerated="true" show_console_on_std_err="false" show_console_on_std_out="false">
      <module name="GuesswhoGame" />
      <option name="VMParameters" value="" />
      <option name="allowRunningInParallel" value="false" />
      <option name="alternativeJrePath" />
      <option name="alternativeJrePathEnabled" value="false" />
      <option name="classpathModifications">
        <list />
      </option>
      <option name="envFilePaths">
        <list />
      </option>
      <option name="envs">
        <map />
      </option>
      <option name="passParentEnvs" value="true" />
      <option name="programParameters" value="" />
      <option name="projectPathOnTarget" />
      <option name="selectedOptions">
        <list />
      </option>
      <option name="testKind" value="Test name" />
      <option name="workingDirectory" value="$PROJECT_DIR$" />
      <option name="testClassPath" value="QuestionFilterSpec" />
      <option name="testName" value="filterCharacters should return false and a list of all characters when nothing is entered" />
      <option name="workingDirectory" value="$PROJECT_DIR$" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="QuestionFilterSpec.filterCharacters should return false and a list of characters who are not blonde when the characters are not blonde" type="ScalaTestRunConfiguration" factoryName="ScalaTest" temporary="true" nameIsGenerated="true" show_console_on_std_err="false" show_console_on_std_out="false">
      <module name="GuesswhoGame" />
      <option name="VMParameters" value="" />
      <option name="allowRunningInParallel" value="false" />
      <option name="alternativeJrePath" />
      <option name="alternativeJrePathEnabled" value="false" />
      <option name="classpathModifications">
        <list />
      </option>
      <option name="envFilePaths">
        <list />
      </option>
      <option name="envs">
        <map />
      </option>
      <option name="passParentEnvs" value="true" />
      <option name="programParameters" value="" />
      <option name="projectPathOnTarget" />
      <option name="selectedOptions">
        <list />
      </option>
      <option name="testKind" value="Test name" />
      <option name="workingDirectory" value="$PROJECT_DIR$" />
      <option name="testClassPath" value="QuestionFilterSpec" />
      <option name="testName" value="filterCharacters should return false and a list of characters who are not blonde when the characters are not blonde" />
      <option name="workingDirectory" value="$PROJECT_DIR$" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="QuestionFilterSpec.filterCharacters should return true and a list of characters wearing glasses when the characters wear glasses&#10;filterCharacters should return false and a list of characters wearing a hat when the characters wear a hat&#10;filterCharacters should return true and a list of characters who are male when the characters are men&#10;filterCharacters should return false and a list of characters who are male when the characters are male&#10;filterCharacters should return false and a list of characters who are not blonde when the characters are not blonde&#10;filterCharacters should return true and a list of characters who have black hair when the characters have black hair&#10;filterCharacters should return false and a list of all characters when anything is invalid&#10;filterCharacters should return false and a list of all characters when nothing is entered" type="ScalaTestRunConfiguration" factoryName="ScalaTest" temporary="true" nameIsGenerated="true" show_console_on_std_err="false" show_console_on_std_out="false">
      <module name="GuesswhoGame" />
      <option name="VMParameters" value="" />
      <option name="allowRunningInParallel" value="false" />
      <option name="alternativeJrePath" />
      <option name="alternativeJrePathEnabled" value="false" />
      <option name="classpathModifications">
        <list />
      </option>
      <option name="envFilePaths">
        <list />
      </option>
      <option name="envs">
        <map />
      </option>
      <option name="passParentEnvs" value="true" />
      <option name="programParameters" value="" />
      <option name="projectPathOnTarget" />
      <option name="selectedOptions">
        <list />
      </option>
      <option name="testKind" value="Test name" />
      <option name="workingDirectory" value="$PROJECT_DIR$" />
      <option name="testClassPath" value="QuestionFilterSpec" />
      <option name="testName" value="filterCharacters should return true and a list of characters wearing glasses when the characters wear glasses&#10;filterCharacters should return false and a list of characters wearing a hat when the characters wear a hat&#10;filterCharacters should return true and a list of characters who are male when the characters are men&#10;filterCharacters should return false and a list of characters who are male when the characters are male&#10;filterCharacters should return false and a list of characters who are not blonde when the characters are not blonde&#10;filterCharacters should return true and a list of characters who have black hair when the characters have black hair&#10;filterCharacters should return false and a list of all characters when anything is invalid&#10;filterCharacters should return false and a list of all characters when nothing is entered" />
      <option name="workingDirectory" value="$PROJECT_DIR$" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="QuestionFilterSpec.filterCharacters should return true and a list of characters who have black hair when the characters have black hair" type="ScalaTestRunConfiguration" factoryName="ScalaTest" temporary="true" nameIsGenerated="true" show_console_on_std_err="false" show_console_on_std_out="false">
      <module name="GuesswhoGame" />
      <option name="VMParameters" value="" />
      <option name="allowRunningInParallel" value="false" />
      <option name="alternativeJrePath" />
      <option name="alternativeJrePathEnabled" value="false" />
      <option name="classpathModifications">
        <list />
      </option>
      <option name="envFilePaths">
        <list />
      </option>
      <option name="envs">
        <map />
      </option>
      <option name="passParentEnvs" value="true" />
      <option name="programParameters" value="" />
      <option name="projectPathOnTarget" />
      <option name="selectedOptions">
        <list />
      </option>
      <option name="testKind" value="Test name" />
      <option name="workingDirectory" value="$PROJECT_DIR$" />
      <option name="testClassPath" value="QuestionFilterSpec" />
      <option name="testName" value="filterCharacters should return true and a list of characters who have black hair when the characters have black hair" />
      <option name="workingDirectory" value="$PROJECT_DIR$" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <recent_temporary>
      <list>
        <item itemvalue="ScalaTest.QuestionFilterSpec.filterCharacters should return true and a list of characters wearing glasses when the characters wear glasses&#10;filterCharacters should return false and a list of characters wearing a hat when the characters wear a hat&#10;filterCharacters should return true and a list of characters who are male when the characters are men&#10;filterCharacters should return false and a list of characters who are male when the characters are male&#10;filterCharacters should return false and a list of characters who are not blonde when the characters are not blonde&#10;filterCharacters should return true and a list of characters who have black hair when the characters have black hair&#10;filterCharacters should return false and a list of all characters when anything is invalid&#10;filterCharacters should return false and a list of all characters when nothing is entered" />
        <item itemvalue="ScalaTest.QuestionFilterSpec.filterCharacters should return false and a list of all characters when nothing is entered" />
        <item itemvalue="ScalaTest.QuestionFilterSpec.filterCharacters should return false and a list of all characters when anything is invalid" />
        <item itemvalue="ScalaTest.QuestionFilterSpec.filterCharacters should return true and a list of characters who have black hair when the characters have black hair" />
        <item itemvalue="ScalaTest.QuestionFilterSpec.filterCharacters should return false and a list of characters who are not blonde when the characters are not blonde" />
      </list>
    </recent_temporary>
  </component>
  <component name="ScalaProjectSettings">
    <option name="migrateConfigurationsNotificationShown" value="true" />
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="c7c7d2e7-40f8-4136-ad61-d6605d670397" name="Changes" comment="" />
      <created>1739824271091</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1739824271091</updated>
    </task>
    <servers />
  </component>
</project>